pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "preeti730/simple-hello:latest"  // Docker Hub image
        KUBE_NAMESPACE = "preeti"                        // Namespace for your app
        AWS_REGION = "eu-west-2"                         // AWS region
        CLUSTER_NAME = "batch4-Team3-cluster"           // EKS Cluster Name
    }

    tools {
        maven 'maven3'   // Maven installed in Jenkins global tools
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'preeti-gitcred', 
                    url: 'https://github.com/Sejalkarwa/MySpringBootApp-Sejal.git', 
                    branch: 'main'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        docker build -t $DOCKER_IMAGE .
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-eks-creds']]) {
                    sh '''
                        # Update kubeconfig for Jenkins
                        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

                        # Create namespace if not exists
                        kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

                        # Replace image in deployment manifest
                        sed -i "s|preeti730/simple-hello:latest|$DOCKER_IMAGE|g" k8s/springboot-deployment.yaml

                        # Apply deployment
                        kubectl apply -f k8s/springboot-deployment.yaml
                    '''
                }
            }
        }

        stage('Apply Service & Ingress') {
            steps {
                sh '''
                    # Apply service
                    kubectl apply -f k8s/service.yaml

                    # Apply ingress
                    kubectl apply -f k8s/ingress.yaml
                '''
            }
        }

        stage('Post-Deployment Health Check') {
            steps {
                sh '''
                    echo "Checking rollout status..."
                    kubectl rollout status deployment/springboot-hello -n $KUBE_NAMESPACE --timeout=60s
                    
                    echo "Listing pods..."
                    kubectl get pods -n $KUBE_NAMESPACE

                    echo "Listing services..."
                    kubectl get svc -n $KUBE_NAMESPACE
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed. Collecting logs..."
            sh 'kubectl get events -n $KUBE_NAMESPACE || true'
            sh 'kubectl describe pods -n $KUBE_NAMESPACE || true'
        }
        always {
            echo "üì¶ Pipeline completed (success or fail)."
        }
    }
}
